extends ../layouts/_layout_default-2

block title 
    title House To Home | My Profile

block content
    section.breadcrumbWrapper
        .container
            ol.breadcrumb
                li.breadcrumb-item
                    a(href='/') Home
                li.breadcrumb-item.active(aria-current='page')  Post your house
    
    section.myProfile.postHouse
        .container
            .heading
                h1
                    span Post your house
            .step
                ul.clearfix
                    li.processing.active
                        span    1
                    li
                        span    2
                    li
                        span    3
            form.myProfileForm
                .row.justify-content-center
                    .col-12.col-sm-10.col-md-8.col-lg-6
                        h2.heading--2
                            span    Step 1 of 3
                            p     Hi, David Nguyen! Let's start posting your house!  
                        .row
                            .col-12.col-md-6
                                .form-group
                                    label(for="postalCode") Postal code
                                    input#postalCode.form-control(type="text" name="postalCode" value="" placeholder="Enter postal code")

                            .col-12.col-md-6
                                .form-group
                                    label(for="block") block
                                    input#block.form-control(type="text" name="block" value="" placeholder='Enter block')

                        .form-group
                            label(for="address") address
                            input#pac-input.form-control(type="text" name="address" value="" placeholder='Enter address')

                        .row
                            .col-12.col-md-6
                                .form-group
                                    label(for="floor") floor
                                    input#floor.form-control(type="text" name="floor" value="" placeholder='Enter Floor')

                            .col-12.col-md-6
                                .form-group
                                    label(for="unit") unit
                                    input#unit.form-control(type="text" name="unit" value="" placeholder='Enter Unit')
                        .form-group
                            label(for="address") Map
                            #map(style="height: 222px;")
                            #infowindow-content
                                img#place-icon(src='', width='16', height='16')
                                span#place-name.title
                                br
                                span#place-address
                        .form-btn.text-center
                            button.btn.btn-danger.blue(type="submit") next step

block js
    script.
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -33.8688, lng: 151.2195},
            zoom: 13
            });
            var card = document.getElementById('pac-card');
            var input = document.getElementById('pac-input');
            var types = document.getElementById('type-selector');
            var strictBounds = document.getElementById('strict-bounds-selector');

            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

            var autocomplete = new google.maps.places.Autocomplete(input);

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo('bounds', map);

            // Set the data fields to return when the user selects a place.
            autocomplete.setFields(
                ['address_components', 'geometry', 'icon', 'name']);

            var infowindow = new google.maps.InfoWindow();
            var infowindowContent = document.getElementById('infowindow-content');
            infowindow.setContent(infowindowContent);
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindowContent.children['place-icon'].src = place.icon;
            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].textContent = address;
            infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function() {
                    autocomplete.setTypes(types);
                });
            }

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);

            document.getElementById('use-strict-bounds')
                .addEventListener('click', function() {
                console.log('Checkbox clicked! New state=' + this.checked);
                autocomplete.setOptions({strictBounds: this.checked});
                });
        }
        